{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\RiderProjects\\\\Diplom\\\\DotNetSca\\\\ScaWebAngular\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\"; // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\nexport class LoginComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n\n      switch (action.path) {\n        case LoginActions.Login:\n          yield _this.login(_this.getReturnUrl());\n          break;\n\n        case LoginActions.LoginCallback:\n          yield _this.processLoginCallback();\n          break;\n\n        case LoginActions.LoginFailed:\n          const message = _this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n\n          _this.message.next(message);\n\n          break;\n\n        case LoginActions.Profile:\n          _this.redirectToProfile();\n\n          break;\n\n        case LoginActions.Register:\n          _this.redirectToRegister();\n\n          break;\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n\n  login(returnUrl) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const result = yield _this2.authorizeService.signIn(state);\n\n      _this2.message.next(undefined);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          yield _this2.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          yield _this2.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n            queryParams: {\n              [QueryParameterNames.Message]: result.message\n            }\n          });\n          break;\n\n        default:\n          throw new Error(`Invalid status result ${result.status}.`);\n      }\n    })();\n  }\n\n  processLoginCallback() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignIn(url);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as completeSignIn never redirects.\n          throw new Error('Should not redirect.');\n\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n\n          break;\n      }\n    })();\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // It's important that we do a replace here so that we remove the callback uri with the\n      // fragment containing the tokens from the browser history.\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl; // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n\n    return state && state.returnUrl || fromQuery || ApplicationPaths.DefaultLoginRedirectPath;\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 3,\n  vars: 3,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\n    }\n  },\n  pipes: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"names":["AuthenticationResultStatus","BehaviorSubject","LoginActions","QueryParameterNames","ApplicationPaths","ReturnUrlType","i0","i1","i2","i3","LoginComponent","constructor","authorizeService","activatedRoute","router","message","ngOnInit","action","snapshot","url","path","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","queryParamMap","get","Message","next","Profile","redirectToProfile","Register","redirectToRegister","Error","returnUrl","state","result","signIn","undefined","status","Redirect","Success","navigateToReturnUrl","Fail","navigate","LoginFailedPathComponents","queryParams","window","location","href","completeSignIn","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","navigateByUrl","replaceUrl","fromQuery","startsWith","origin","test","DefaultLoginRedirectPath","apiAuthorizationPath","redirectUrl","replace","ɵfac","LoginComponent_Factory","t","ɵɵdirectiveInject","AuthorizeService","ActivatedRoute","Router","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵpipe","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","pipes","AsyncPipe","styles"],"sources":["C:/Users/Admin/RiderProjects/Diplom/DotNetSca/ScaWebAngular/ClientApp/src/api-authorization/login/login.component.ts"],"sourcesContent":["import { AuthenticationResultStatus } from '../authorize.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../authorize.service\";\r\nimport * as i2 from \"@angular/router\";\r\nimport * as i3 from \"@angular/common\";\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\nexport class LoginComponent {\r\n    constructor(authorizeService, activatedRoute, router) {\r\n        this.authorizeService = authorizeService;\r\n        this.activatedRoute = activatedRoute;\r\n        this.router = router;\r\n        this.message = new BehaviorSubject(null);\r\n    }\r\n    async ngOnInit() {\r\n        const action = this.activatedRoute.snapshot.url[1];\r\n        switch (action.path) {\r\n            case LoginActions.Login:\r\n                await this.login(this.getReturnUrl());\r\n                break;\r\n            case LoginActions.LoginCallback:\r\n                await this.processLoginCallback();\r\n                break;\r\n            case LoginActions.LoginFailed:\r\n                const message = this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\r\n                this.message.next(message);\r\n                break;\r\n            case LoginActions.Profile:\r\n                this.redirectToProfile();\r\n                break;\r\n            case LoginActions.Register:\r\n                this.redirectToRegister();\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n    }\r\n    async login(returnUrl) {\r\n        const state = { returnUrl };\r\n        const result = await this.authorizeService.signIn(state);\r\n        this.message.next(undefined);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                break;\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(returnUrl);\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                await this.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\r\n                    queryParams: { [QueryParameterNames.Message]: result.message }\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid status result ${result.status}.`);\r\n        }\r\n    }\r\n    async processLoginCallback() {\r\n        const url = window.location.href;\r\n        const result = await this.authorizeService.completeSignIn(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as completeSignIn never redirects.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.message.next(result.message);\r\n                break;\r\n        }\r\n    }\r\n    redirectToRegister() {\r\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\r\n    }\r\n    redirectToProfile() {\r\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n    }\r\n    async navigateToReturnUrl(returnUrl) {\r\n        // It's important that we do a replace here so that we remove the callback uri with the\r\n        // fragment containing the tokens from the browser history.\r\n        await this.router.navigateByUrl(returnUrl, {\r\n            replaceUrl: true\r\n        });\r\n    }\r\n    getReturnUrl(state) {\r\n        const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl;\r\n        // If the url is coming from the query string, check that is either\r\n        // a relative url or an absolute url\r\n        if (fromQuery &&\r\n            !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n                /\\/[^\\/].*/.test(fromQuery))) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n        }\r\n        return (state && state.returnUrl) ||\r\n            fromQuery ||\r\n            ApplicationPaths.DefaultLoginRedirectPath;\r\n    }\r\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\r\n        // It's important that we do a replace here so that when the user hits the back arrow on the\r\n        // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n        // component.\r\n        const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n        window.location.replace(redirectUrl);\r\n    }\r\n}\r\nLoginComponent.ɵfac = function LoginComponent_Factory(t) { return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router)); };\r\nLoginComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: LoginComponent, selectors: [[\"app-login\"]], decls: 3, vars: 3, template: function LoginComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"p\");\r\n        i0.ɵɵtext(1);\r\n        i0.ɵɵpipe(2, \"async\");\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\r\n    } }, pipes: [i3.AsyncPipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"] });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}